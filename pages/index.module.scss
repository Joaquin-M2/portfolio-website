@import '../sass/abstracts/variables.scss';
@import '../sass/abstracts/mixins.scss';

.positionMainElements {
  display: flex;
  flex-direction: column;
  min-height: 100vh;
}

.container {
    // display: grid;
    // grid-template: repeat(8, 1fr) / 5rem 1fr;
    height: 80vh;
    padding: 3rem;
    display: flex;
    flex-direction: column;
    justify-content: space-around;

}

.title {
  @include responsiveDesign(800) {
    text-align: center;
  }
}

.welcome {
    // grid-area: 2 / 2 / 3 / 3;
    display: inline-block;
    //margin-bottom: 1rem;

    color: $body-text;

    font-size: 5.6rem;
    letter-spacing: .24rem;
    
    animation: welcomeTitle 1s ease-in-out;
}

@keyframes welcomeTitle {
  0% {
    transform: translateY(-100%);
    opacity: 0;
  }
  100% {
    transform: translateY(0);
    opacity: 1;
  }
}

.position {
    // grid-area: 3 / 2 / 4 / 3;
    // align-self: center;
    margin-top: 2rem;

    color: $body-text;

    font-size: 3.2rem;
    font-style: italic;
    letter-spacing: .24rem;
    animation: hide 1.3s, positionTitle 1.2s 1.3s ease-in-out;
  }
  
@keyframes hide {
  0% {
    opacity: 0;
  }

  100% {
    opacity: 0;
  }
}

@keyframes positionTitle {
  0% {
      opacity: 0;
  }

  100% {
    opacity: 1;
  }
}

.question {
    // grid-area: 6 / 2 / 7 / 3;
    // align-self: center;
    display: inline-block;
    color: $body-text;

    //margin-bottom: 2rem;
    height: 2.4rem; // HEIGHT is necessary to set an space on screen before the text appears. Otherwise, it will vertically move during the animation due to flexbox positioning.
                  
    font-size: 2.4rem;
    font-weight: bold;
    letter-spacing: .28rem;

    @include responsiveDesign(800) {
      height: 5rem; // The HEIGHT of this element is doubled + an extra, so there is no change in the position of elements on the layout when the question element "<p>" occupies two lines.
    }
}

.answer {
    // grid-area: 7 / 2 / 8 / 3;
    // align-self: start;

    color: $body-text;

    margin-top: 2rem;
    height: 2.4rem; // HEIGHT is necessary to set an space on screen before the text appears. Otherwise, it will vertically move during the animation due to flexbox positioning.
    line-height: 5rem; // LINE-HEIGHT is necessary to avoid any vertically movement of the "answer" line when the buttons are added.
    font-size: 2.4rem;
    letter-spacing: .16rem;

    // & > a {
    //   display: inline-block;
    //   color: red;
    //   animation: exploding .5s linear;
    //   &:hover {
    //     display: inline-block;
    //     transform: scale(1.1)
    //   }

    //   & + span {
    //     color: green;
    //   }
    // }
}

// @keyframes exploding {
//   0% {
//     transform: scale(2)
//   }

//   // 50% {
//   //   transform: scale(1.5)
//   // }
  
//   100% {
//     transform: scale(1)
//   }
// }


//////////////////////////////
// BACKGROUND DROPS

$total: 5; // 144
//$time: 5;
//$height: 10;
//$percent: .69444%;
$dotSize: .9;


.wrap {
  position: fixed;
  width: 100vw;
  height: 100vh;
  z-index: -1;
  //grid-area: 1 / 1 / 9 / 7;
  overflow: hidden;
  display: flex;
  justify-content: start;
}

.binaryDropLine {
  position: relative;
  display: flex;
  justify-content: center;
  height: 0rem;
  min-width: 1rem;
  overflow: hidden;
  border-radius: 0 0 50% 50%;
  animation: drop infinite linear; //$time+s  -- The length of the animation is stated on JS.

  @include responsiveDesign(800) {
    width: 1rem;
  }

  &:after {
    content: "";
    position: absolute;
    width: $dotSize+vw;
    height: $dotSize+vw;
    border-radius: 50%;
    left: 50%;
    bottom: 0;//-($dotSize/2)+vw;
    margin-left: -($dotSize/2)+vw;
  }
}

@for $i from 1 through $total {
//   $hue: (300/$total) * $i;
  .binaryDropLine:nth-child(#{$i}){
    //left: ($i - 1) * $percent;
    background-color: black;
    //background-image: linear-gradient( to bottom, transparent 20%, rgba(0, 0, 0, 0.3) 50%, rgba(0, 0, 0, 0.5) 80%, black);

    //background-image: linear-gradient( to bottom, $color-intense-blue, hsla(140, 100%, 30%, .8));
    animation-delay: random(150) / (100) * 1s;
    &:after {
      background: hsla(140, 100%, 30%, 1);
    }
  }
}

@keyframes drop {
  80% {
      opacity: 0;
}
100% {
    //transform: translate3d(0, 150vh, 0);
    height: 150vh;
    opacity: 0;
  }
}

.binaryDropLine p {
    writing-mode: vertical-rl;
    text-orientation: upright;
    color: rgba(255, 255, 255, .8);
    display: block;
    
    @include responsiveDesign(800) {
      font-size: .6rem !important;
    }

    @include responsiveDesign(500) {
      font-size: .4rem !important;
    }

    // @include responsiveDesign(400) {
    //   font-size: .3rem;
    // }

    // @include responsiveDesign(400) {
    //   font-size: 1px;
    // }

    // Change the text direction: From right to left (due to the "text-orientation" property, 
    // in this case it is from bottom to top).
    // direction: rtl;
    // unicode-bidi: bidi-override;

    //margin-bottom: .5rem;
}

.answerButtons {
  width: auto;
  font-size: 2rem;
  font-weight: bold;
  letter-spacing: .16rem;
  padding: 1rem .8rem;

  opacity: 0;
  animation: appear 1s linear forwards;
}

@keyframes appear {
  100% {
    opacity: 1;
  }
}